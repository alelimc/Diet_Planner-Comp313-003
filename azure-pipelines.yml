# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - main

pool:
  name: project-selfhosted-agent

variables:
  JAVA_HOME: 'C:\\Program Files\\Java\\jdk-17.0.14.7'
  MAVEN_OPTS: '-Dmaven.repo.local=$(Pipeline.Workspace)/.m2/repository'

steps:

# Java Setup
- powershell: |
    $javaHome = "$env:JAVA_HOME"
    Write-Host "Setting JAVA_HOME to $javaHome"
    Write-Host "##vso[task.setvariable variable=JAVA_HOME]$javaHome"
    Write-Host "##vso[task.prependpath]$javaHome\bin"
    & "$javaHome\bin\java" -version
    mvn -version
  displayName: 'Setup Java 17 Environment'

# Build UI Project
- script: |
    cd Diet_Planner-Comp313-003
    mvn clean verify
  displayName: 'Build UI Project'
  env:
    JAVA_HOME: $(JAVA_HOME)
    PATH: $(JAVA_HOME)\bin;$(PATH)

# Build API Project
- script: |
    cd DietPlanner_MealServiceAPI
    mvn clean verify
  displayName: 'Build API Project'
  env:
    JAVA_HOME: $(JAVA_HOME)
    PATH: $(JAVA_HOME)\bin;$(PATH)

# âœ… Manual SonarQube Analysis
- script: |
    sonar-scanner ^
      -Dsonar.projectKey=dietplanner ^
      -Dsonar.projectName="Diet Planner App" ^
      -Dsonar.sources=. ^
      -Dsonar.java.binaries=**/target/classes ^
      -Dsonar.sourceEncoding=UTF-8 ^
      -Dsonar.java.source=17
  displayName: 'Run SonarQube Scanner'
  env:
    JAVA_HOME: $(JAVA_HOME)
    PATH: $(JAVA_HOME)\bin;$(PATH)

# Publish Unit Test Results
- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFiles: '**/target/surefire-reports/TEST-*.xml'
    testRunTitle: 'Java Unit Tests'
  displayName: 'Publish Test Results'

# Publish Code Coverage
- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'JaCoCo'
    summaryFileLocation: '**/target/site/jacoco/jacoco.xml'
    reportDirectory: '**/target/site/jacoco'
  displayName: 'Publish Code Coverage'

# Publish Build Artifacts
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '**/target/*.?ar'
    artifactName: 'dietplanner-artifacts'
    publishLocation: 'Container'
  displayName: 'Publish Build Artifacts'

