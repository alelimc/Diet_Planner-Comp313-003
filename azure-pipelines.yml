# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - main

pool:
  name: project-selfhosted-agent

variables:
  JAVA_HOME: 'C:\Program Files\Java\jdk-17.0.14.7'
  MAVEN_HOME: 'C:\Apache\Maven'
  MAVEN_OPTS: '-Dmaven.repo.local=$(Pipeline.Workspace)/.m2/repository'
  SONAR_SCANNER_HOME: 'C:\sonar-scanner-5.0.1.3006-windows'
  SONAR_JAVA_PATH: 'C:\Program Files\Java\jdk-17.0.14.7\bin\java.exe'
  SONARQUBE_URL: 'http://localhost:9000'

stages:

# -----------------------------------------
# CI Stage
# -----------------------------------------
- stage: CI
  displayName: 'Continuous Integration'
  jobs:
    - job: BuildAndTest
      displayName: 'Build and Test'
      steps:

        # Setup Environment
        - task: CmdLine@2
          displayName: 'Setup and Verify Environment'
          inputs:
            script: |
              echo JAVA_HOME=%JAVA_HOME%
              echo MAVEN_HOME=%MAVEN_HOME%
              echo ##vso[task.prependpath]%SONAR_SCANNER_HOME%\bin

              if not exist "%JAVA_HOME%\bin\java.exe" (
                echo Error: Java not found.
                exit /b 1
              )

              if not exist "%MAVEN_HOME%\bin\mvn.cmd" (
                echo Error: Maven not found.
                exit /b 1
              )

              echo ##vso[task.setvariable variable=JAVA_HOME]%JAVA_HOME%
              echo ##vso[task.setvariable variable=MAVEN_HOME]%MAVEN_HOME%
              echo ##vso[task.prependpath]%JAVA_HOME%\bin
              echo ##vso[task.prependpath]%MAVEN_HOME%\bin

              java -version
              mvn -version
              sonar-scanner -v
          env:
            PATH: $(JAVA_HOME)\bin;$(MAVEN_HOME)\bin;$(PATH)

        # Build UI
        - task: CmdLine@2
          displayName: 'Build UI Project'
          inputs:
            script: |
              cd Diet_Planner-Comp313-003
              mvn clean verify

        # Build API
        - task: CmdLine@2
          displayName: 'Build API Project'
          inputs:
            script: |
              cd DietPlanner_MealServiceAPI
              mvn clean verify

        # Sonar Scanner
        - task: CmdLine@2
          displayName: 'Run SonarQube Scanner'
          inputs:
            script: |
              set SONAR_SCANNER_OPTS=-Djava.executable="%SONAR_JAVA_PATH%"
              "%SONAR_SCANNER_HOME%\bin\sonar-scanner.bat" ^
                -Dsonar.host.url=%SONARQUBE_URL% ^
                -Dsonar.login=%SONARQUBE_TOKEN% ^
                -Dsonar.projectKey=dietplanner ^
                -Dsonar.projectName="Diet Planner App" ^
                -Dsonar.sources=. ^
                -Dsonar.java.binaries=**/target/classes ^
                -Dsonar.sourceEncoding=UTF-8 ^
                -Dsonar.java.source=17 ^
                -Dsonar.java.version=17 ^
                -X
          env:
            JAVA_HOME: $(JAVA_HOME)
            MAVEN_HOME: $(MAVEN_HOME)
            PATH: $(SONAR_SCANNER_HOME)\bin;$(JAVA_HOME)\bin;$(MAVEN_HOME)\bin;$(PATH)
            SONARQUBE_TOKEN: $(sonarqubeTokenPAT)

        # Unit Test Results
        - task: PublishTestResults@2
          inputs:
            testResultsFiles: '**/target/surefire-reports/TEST-*.xml'
            testRunTitle: 'Java Unit Tests'

        # Code Coverage
        - task: PublishCodeCoverageResults@1
          inputs:
            codeCoverageTool: 'JaCoCo'
            summaryFileLocation: '**/target/site/jacoco/jacoco.xml'
            reportDirectory: '**/target/site/jacoco'

# -----------------------------------------
# Deliver Stage - Archive Artifacts
# -----------------------------------------
- stage: Deliver
  displayName: 'Deliver Artifacts'
  dependsOn: CI
  jobs:
    - job: Archive
      steps:
        # Check if UI Artifact folder exists
        - task: CmdLine@2
          displayName: 'Verify UI Artifact Folder Exists'
          inputs:
            script: |
              if not exist "$(System.DefaultWorkingDirectory)\Diet_Planner-Comp313-003\target" (
                echo UI artifact path not found!
                dir $(System.DefaultWorkingDirectory)\Diet_Planner-Comp313-003
                exit /b 1
              )

        - task: PublishBuildArtifacts@1
          displayName: 'Publish UI Artifact'
          inputs:
            PathtoPublish: '$(System.DefaultWorkingDirectory)\Diet_Planner-Comp313-003\target'
            ArtifactName: 'dietplanner-ui'
            publishLocation: 'container'

        # Check if API Artifact folder exists
        - task: CmdLine@2
          displayName: 'Verify API Artifact Folder Exists'
          inputs:
            script: |
              if not exist "$(System.DefaultWorkingDirectory)\DietPlanner_MealServiceAPI\target" (
                echo API artifact path not found!
                dir $(System.DefaultWorkingDirectory)\DietPlanner_MealServiceAPI
                exit /b 1
              )

        - task: PublishBuildArtifacts@1
          displayName: 'Publish API Artifact'
          inputs:
            PathtoPublish: '$(System.DefaultWorkingDirectory)\DietPlanner_MealServiceAPI\target'
            ArtifactName: 'dietplanner-api'
            publishLocation: 'container'

            
# -----------------------------------------
# Deploy to Dev Environment (Mocked App Run)
# -----------------------------------------
- stage: DeployToDev
  displayName: 'Deploy to Development Environment'
  dependsOn: Deliver
  jobs:
    - job: DevDeploy
      steps:
        - task: CmdLine@2
          displayName: 'Deploying to Dev Environment (localhost:8081)'
          inputs:
            script: |
              echo Simulating deployment to Dev environment...
              echo Launching API and UI services on http://localhost:8081 and http://localhost:8082
              timeout /t 3

# -----------------------------------------
# QAT Deployment (Mock)
# -----------------------------------------
- stage: DeployToQAT
  displayName: 'Deploy to QAT Environment'
  dependsOn: DeployToDev
  condition: succeeded()
  jobs:
    - job: QATDeploy
      steps:
        - task: CmdLine@2
          displayName: 'Mock QAT Deployment'
          inputs:
            script: |
              echo Deploying to QAT environment...
              timeout /t 2

# -----------------------------------------
# Staging Deployment (Mock)
# -----------------------------------------
- stage: DeployToStaging
  displayName: 'Deploy to Staging Environment'
  dependsOn: DeployToQAT
  condition: succeeded()
  jobs:
    - job: StagingDeploy
      steps:
        - task: CmdLine@2
          displayName: 'Mock Staging Deployment'
          inputs:
            script: |
              echo Deploying to Staging environment...
              timeout /t 2

# -----------------------------------------
# Production Deployment (Mock)
# -----------------------------------------
- stage: DeployToProd
  displayName: 'Deploy to Production Environment'
  dependsOn: DeployToStaging
  condition: succeeded()
  jobs:
    - job: ProdDeploy
      steps:
        - task: CmdLine@2
          displayName: 'Mock Production Deployment'
          inputs:
            script: |
              echo Deploying to Production environment...
              timeout /t 2

